#=======loading text files and counting lines
# File.open("text.txt").each { |line| puts line }
# line_count = 0
# File.open("text.txt").each { |line| line_count += 1 }
# puts line_count

# text=''
# line_count=0
# File.open("text.txt").each do |line|
#   line_count+=1
#   text << line
# end
# puts "#{line_count}"

# lines=File.readlines("text.txt")
#     line_count=lines.length
# line_count=lines.size
#    test=lines.join
# puts "#{line_count} lines"
#=======================Counting Charecter===
# lines=File.readlines("text.txt").each { |line| line }
# line_count=lines.size
# text=lines.join
# puts "#{line_count} lines"
# totsl_characters=text.length
# puts"#{totsl_characters} characters"
# total_characters_nospaces=text.gsub(/\s/,'').length
# puts "#{t
# puts "scan method: #{text.scan(/\w+/).length}"
# sentence_count=text.split(/\.|\?|!/).length
# puts sentence_countotal_characters_nospaces} characters excluding spaces."
# word_count=text.split.length
# puts "#{word_count} words."
#
# puts "scan method: #{text.scan(/\w+/).length}"
# sentence_count=text.split(/\.|\?|!/).length
# puts sentence_count
#======newline========
# paragraph_count = %q{This is a test of
#
#  paragraph one.
#
# This is a test of
#
# paragraph two. T
#
# his is a test of
#
# paragraph three.}

# puts text.split(/\n\n/).length
#=================paragraph count
# lines=File.readlines("text.txt").each { |line| line }
# # line_count=lines.size
# text=lines.join
# paragraph_count = text.split(/\n\n/).length
# puts "#{paragraph_count} paragraphs"
# sentence_count = text.split(/\.|\?|!/).length
# word_count=text.split.length
# puts "#{word_count} words."
# puts "#{sentence_count} sentences"
# puts "#{(sentence_count / paragraph_count).to_f} sentences per paragraph (average)"
# puts "#{word_count / sentence_count} words per sentence (average)"
#=====================fulll work====
# lines=File.readlines("text.txt")
# lines_count=lines.size
# text=lines.join
# word_count=text.split.length
# character_count=text.length
# character_count_nospaces=text.gsub(/\s+/,'').length
# paragraph_count=text.split(/\n\n/).length
# sentenc_count=text.split(/\.|\?|!/).length
#
# puts "#{lines_count} lines"
# puts "#{character_count} characters"
# puts "#{character_count_nospaces} characters excluding spaces"
# puts "#{word_count} words"
#
# puts "#{paragraph_count} paragraphs"
# puts "#{sentenc_count} sentences"
# puts "#{sentenc_count.to_f/paragraph_count.to_f} sentences per paragraph (average)"
# puts "#{word_count.to_f/sentenc_count.to_f} words per sentences (average)"

# ================
# text = %q{Los Angeles has some of the nicest weather in the country.}
# stopwords = %w{the a by on for of are with just but and to the my in I has some}
# words = text.scan(/\w+/)
# keywords = words.select { |word| !stopwords.include?(word) }
# puts keywords.join(' ')
# puts ((keywords.length.to_f / words.length.to_f) * 100).to_i

# text = %q{
# Ruby is a great programming        language. It is object oriented
# and has many groovy features. Some people don't like it, but that's
# not our problem! It's easy t                o learn. It's great. To learn more about Ruby,
# visit the official Ruby Web site today.
# }
# sentences = text.gsub(/\s+/, ' ').strip.split(/\.|\?|!/)
# puts sentences
# puts "================================="
# sentences_sorted = sentences.sort_by { |sentence| sentence.length }
# puts sentences_sorted
# puts"======================="
#
# one_third = sentences_sorted.length.to_f / 3
# puts one_third
# puts"====================="
# ideal_sentences1 = sentences_sorted.slice(one_third, one_third + 1)
# puts ideal_sentences1
# puts"====================="
# ideal_sentences = ideal_sentences1.select { |sentence| sentence =~ /is|are/ }
#
# puts ideal_sentences.join(". ")
# puts ARGV.join('-')


#===================================
#=======loading text files and counting lines
# File.open("text.txt").each { |line| puts line }
# line_count = 0
# File.open("text.txt").each { |line| line_count += 1 }
# puts line_count

# text=''
# line_count=0
# File.open("text.txt").each do |line|
#   line_count+=1
#   text << line
# end
# puts "#{line_count}"

# lines=File.readlines("text.txt")
#     line_count=lines.length
# line_count=lines.size
#    test=lines.join
# puts "#{line_count} lines"
#=======================Counting Charecter===
# lines=File.readlines("text.txt").each { |line| line }
# line_count=lines.size
# text=lines.join
# puts "#{line_count} lines"
# totsl_characters=text.length
# puts"#{totsl_characters} characters"
# total_characters_nospaces=text.gsub(/\s/,'').length
# puts "#{t
# puts "scan method: #{text.scan(/\w+/).length}"
# sentence_count=text.split(/\.|\?|!/).length
# puts sentence_countotal_characters_nospaces} characters excluding spaces."
# word_count=text.split.length
# puts "#{word_count} words."
#
# puts "scan method: #{text.scan(/\w+/).length}"
# sentence_count=text.split(/\.|\?|!/).length
# puts sentence_count
#======newline========
# paragraph_count = %q{This is a test of
#
#  paragraph one.
#
# This is a test of
#
# paragraph two. T
#
# his is a test of
#
# paragraph three.}

# puts text.split(/\n\n/).length
#=================paragraph count
# lines=File.readlines("text.txt").each { |line| line }
# # line_count=lines.size
# text=lines.join
# paragraph_count = text.split(/\n\n/).length
# puts "#{paragraph_count} paragraphs"
# sentence_count = text.split(/\.|\?|!/).length
# word_count=text.split.length
# puts "#{word_count} words."
# puts "#{sentence_count} sentences"
# puts "#{(sentence_count / paragraph_count).to_f} sentences per paragraph (average)"
# puts "#{word_count / sentence_count} words per sentence (average)"
#=====================fulll work====
# lines=File.readlines("text.txt")
# lines_count=lines.size
# text=lines.join
# word_count=text.split.length
# character_count=text.length
# character_count_nospaces=text.gsub(/\s+/,'').length
# paragraph_count=text.split(/\n\n/).length
# sentenc_count=text.split(/\.|\?|!/).length
#
# puts "#{lines_count} lines"
# puts "#{character_count} characters"
# puts "#{character_count_nospaces} characters excluding spaces"
# puts "#{word_count} words"
#
# puts "#{paragraph_count} paragraphs"
# puts "#{sentenc_count} sentences"
# puts "#{sentenc_count.to_f/paragraph_count.to_f} sentences per paragraph (average)"
# puts "#{word_count.to_f/sentenc_count.to_f} words per sentences (average)"

# ================
# text = %q{Los Angeles has some of the nicest weather in the country.}
# stopwords = %w{the a by on for of are with just but and to the my in I has some}
# words = text.scan(/\w+/)
# keywords = words.select { |word| !stopwords.include?(word) }
# puts keywords.join(' ')
# puts ((keywords.length.to_f / words.length.to_f) * 100).to_i

# text = %q{
# Ruby is a great programming        language. It is object oriented
# and has many groovy features. Some people don't like it, but that's
# not our problem! It's easy t                o learn. It's great. To learn more about Ruby,
# visit the official Ruby Web site today.
# }
# sentences = text.gsub(/\s+/, ' ').strip.split(/\.|\?|!/)
# puts sentences
# puts "================================="
# sentences_sorted = sentences.sort_by { |sentence| sentence.length }
# puts sentences_sorted
# puts"======================="
#
# one_third = sentences_sorted.length.to_f / 3
# puts one_third
# puts"====================="
# ideal_sentences1 = sentences_sorted.slice(one_third, one_third + 1)
# puts ideal_sentences1
# puts"====================="
# ideal_sentences = ideal_sentences1.select { |sentence| sentence =~ /is|are/ }
#
# puts ideal_sentences.join(". ")
# puts ARGV.join('-')


#===================================

